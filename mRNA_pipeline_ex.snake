# define file names
names = ['ADrep1','ADrep2','P0rep1','P0rep2','P4rep1','P4rep2','P7rep1','P7rep2']
number = ['R1','R2']

rule all:
    input: 
        'results/multiqc_report.html',
        expand('results/{name}_flagstats.txt', name=names),
        'results/verse_concat.csv',
        'results/verse_concat_filtered.csv',
        'results/id2gene.txt'

rule fastqc:
    input:
        fastq = 'samples/full_files/{name}_{read}.fastq.gz'
    output:
        fastqc = 'results/{name}_{read}_fastqc.html' 
    params:
        outdir = 'results/'
    shell:
        '''
        fastqc {input.fastq} -o {params.outdir}

rule multiqc:
    input: 
        fq = expand('results/{name}_{read}_fastqc.html', name=names, read=number)
    output:
        'results/multiqc_report.html'
    params:
        results = 'results/'
    shell:
        '''
        multiqc {params.results} -o {params.results} -f
        '''

rule star:
    input:
        r1 = 'samples/full_files/{name}_R1.fastq.gz',
        r2 = 'samples/full_files/{name}_R2.fastq.gz',
        star_index = 'samples/m39_star/'
    output:
        bam = 'results/{name}.Aligned.out.bam'
    params:
        prefix = 'results/{name}.',
        threads = 8
    shell:
        '''
        STAR --runThreadN {params.threads} --genomeDir {input.star_index} --readFilesIn {input.r1} {input.r2} --readFilesCommand zcat --outSAMtype BAM Unsorted --outFileNamePrefix {params.prefix}
        '''

rule samtools_flagstat:
    input:
        bam = 'results/{name}.Aligned.out.bam'
    output:
        flagstats = 'results/{name}_flagstats.txt'
    shell:
        'samtools flagstats {input.bam} > {output.flagstats}'

rule verse:
    input:
        bam = 'results/{name}.Aligned.out.bam',
        gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf',
    output:
        verse_exons = 'results/{name}.exon.txt'
    params:
        prefix = 'results/{name}'
    shell:
        'verse -S -a {input.gtf} -o {params.prefix} {input.bam}'

rule concat_verse:
    input:
        mats = expand('results/{name}.exon.txt', name=names)
    output:
        concat = 'results/verse_concat.csv'
    shell:
        '''
        python concat_df.py -i {input.mats} -o {output.concat}
        '''

rule filter_cts:
    input:
        verse = 'results/verse_concat.csv'
    output:
        filtered = 'results/verse_concat_filtered.csv'
    shell:
        '''
        python filter_cts_mat.py -i {input.verse} -o {output.filtered}
        '''

rule txn_mapping:
    input:
        gtf = 'results/gencode.vM33.primary_assembly.annotation.gtf'
    output:
        mapping = 'results/id2gene.txt'
    shell:
        '''
        python parse_gtf.py -i {input.gtf} -o {output.mapping}
        '''

